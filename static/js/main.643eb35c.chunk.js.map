{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","movieInfo","poster","Poster","onClick","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","placeholder","preventDefault","search","App","modal","document","getElementById","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","jsonResponse","closeModal","remove","style","display","window","onclick","event","openModal","info","console","log","modalBody","createElement","id","undefined","close","innerHTML","header","runtime","Runtime","genre","Genre","plot","Plot","Actors","appendChild","Response","Error","map","index","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.643eb35c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"App-header\">\r\n\r\n      <h2>{props.text}</h2>\r\n      \r\n    </header>\r\n\r\n  );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE = //This is for movies retrieved that don't have an image\r\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\n\r\nconst Movie = ({ movie, movieInfo }) => {\r\n\r\n  const poster =\r\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n\r\n  return (\r\n    <div className=\"movie\" onClick={()=> movieInfo(movie.Title)} >\r\n      <h3>{movie.Title}</h3>\r\n      <div>\r\n        <img\r\n          width=\"200\"\r\n          alt={`The movie titled: ${movie.Title}`}\r\n          src={poster}\r\n        />\r\n      </div>\r\n      <p>({movie.Year})</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Movie;","import React, { useState } from \"react\";\r\n\r\n\r\nconst Search = (props) => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  \r\n  const handleSearchInputChanges = (e) => {\r\n    setSearchValue(e.target.value);\r\n  }\r\n\r\n  const resetInputField = () => {\r\n    setSearchValue(\"\")\r\n  }\r\n\r\n  const callSearchFunction = (e) => {\r\n    e.preventDefault();\r\n    props.search(searchValue);\r\n    resetInputField();\r\n  }\r\n\r\n  return (\r\n      <form className=\"search\">\r\n        <input\r\n          value={searchValue}\r\n          onChange={handleSearchInputChanges}\r\n          type=\"text\"\r\n          placeholder='Search Movie..'\r\n        />\r\n        <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Search;","//Hooks with useState \n\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=avengers&apikey=cabc4c0f\"; \n\n\n\n\n\nconst App = () => { // Func Component \n  var modal = document.getElementById(\"modal\");\n   \n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => { //Shows a home page of a list of avenger movies by calling the API\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n      });\n  }, []);\n\n    const search = searchValue => { //API called with the specific search query to return a list of the relevant movies\n    setLoading(true);\n    setErrorMessage(null);\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=cabc4c0f`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          setMovies(jsonResponse.Search);\n          setLoading(false);\n        } else {\n          setErrorMessage(jsonResponse.Error);\n          setLoading(false);\n        }\n      });\n    };\n\n    const closeModal = (e) => {\n\n      document.getElementById('modal-body').remove();\n      modal.style.display = 'none';\n    }\n\n\n    window.onclick = function(event) {\n\n      if (event.target == modal) {\n        document.getElementById('modal-body').remove();\n        modal.style.display = \"none\";\n      }\n    }\n\n\n    let openModal = (info) => {\n      console.log(\"CALLBACK\", info)\n        fetch(`https://www.omdbapi.com/?t=${info}&apikey=cabc4c0f`)\n          .then(response => response.json())\n          .then(jsonResponse => {\n            var modalBody = document.createElement('div');\n            modalBody.id = 'modal-body';\n\n\n            if( jsonResponse.Title !== undefined) {\n\n              var close = document.createElement('span');\n              close.className = 'close';\n              close.innerHTML = '&times;';\n              close.onclick = closeModal;\n\n\n              var header = document.createElement('h3');\n              header.innerHTML = jsonResponse.Title;\n              header.id = 'header';\n\n              var poster = document.createElement('img');\n              poster.id = 'modalposter';\n              poster.src = jsonResponse.Poster;\n\n              var runtime = document.createElement('p');\n              runtime.innerHTML = 'Runtime: ' + jsonResponse.Runtime;\n              runtime.className = 'para';\n\n              var genre = document.createElement('p');\n              genre.innerHTML = 'Genre: ' + jsonResponse.Genre;\n              genre.className = 'para';\n\n\n              var plot = document.createElement('p');\n              plot.innerHTML = 'Plot: ' + jsonResponse.Plot;\n              plot.className = 'para';\n\n\n              var Actors = document.createElement('p');\n              Actors.innerHTML = 'Actors: ' + jsonResponse.Actors;\n              Actors.className = 'para';\n\n              modal.appendChild(modalBody);\n\n              modalBody.appendChild(close);\n              modalBody.appendChild(header);\n              modalBody.appendChild(poster);\n              modalBody.appendChild(runtime);\n              modalBody.appendChild(genre);\n              modalBody.appendChild(plot);\n              modalBody.appendChild(Actors);\n            }\n\n            modal.style.display = 'flex';\n            modalBody.style.display = 'block';\n          });\n  }\n    \n    return (\n     <div className=\"App\">\n      <Header text=\"Online Movie Lookup\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Search your favorite movies online!</p>\n      <div onClick={openModal} className=\"movies\">\n        {loading && !errorMessage ? (\n         <span className='searchloading'>Search loading...</span>\n         ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie  key={`${index}-${movie.Title}`} movie={movie} movieInfo={openModal} />\n          ))\n        )}\n\n      </div>\n      <div id='modal'>\n\n        {/* <div id=\"modal-body\">\n          <span className=\"close\" onClick={closeModal}>&times;</span>\n\n        </div> */}\n      </div>\n    </div>\n  );\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}